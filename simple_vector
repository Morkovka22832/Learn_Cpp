#include <cassert>
#include "array_ptr.h"
#include <initializer_list>
#include <algorithm>
#include <iterator>
#include <stdexcept>


struct ReserveTag {
    size_t capacity;
};

inline ReserveTag Reserve(size_t n) {
    return {n};
}

template <typename Type>
class SimpleVector {
public:
    using Iterator = Type*;
    using ConstIterator = const Type*;

    SimpleVector() noexcept = default;

    // Создаёт вектор из size элементов, инициализированных значением по умолчанию
    explicit SimpleVector(size_t size) : items_(ArrayPtr<Type>(size)) {
        std::fill(items_.Get(), items_.Get()+size,Type{});
        //std::generate(begin(), begin() + size, [] () {return Type{};}); 
        size_ = size;
        capacity_ = size;
    }

    explicit SimpleVector(ReserveTag tag) {
        Reserve(tag.capacity);
    }

    // Создаёт вектор из size элементов, инициализированных значением value
    SimpleVector(size_t size, const Type& value): items_(ArrayPtr<Type>(size)) {
        size_ = size;
        capacity_ = size;
        std::fill(items_.Get(),items_.Get()+size, value);

    }

    // Создаёт вектор из std::initializer_list
    SimpleVector(std::initializer_list<Type> init) : items_(ArrayPtr<Type>(init.size())) {
        size_ = init.size();
        capacity_ = init.size();
        int i = 0;
        for(auto it  = init.begin(); it!= init.end(); it++) {
            items_[i] = std::move(*it);
            i++;
        }
    }

    // Конструктор копирования
    SimpleVector(const SimpleVector& other) : items_(ArrayPtr<Type>(other.GetCapacity())){
        std::copy(other.begin(), other.end() ,begin());
        size_ = other.GetSize();
        capacity_ = other.GetCapacity();
    }

    SimpleVector(SimpleVector&& other) noexcept 
        : items_(std::move(other.items_)),
          size_(std::exchange(other.size_, 0)),
          capacity_(std::exchange(other.capacity_, 0)) 
    {}

    SimpleVector& operator=(const SimpleVector& rhs) {
        if (this != &rhs) {
            SimpleVector copy = SimpleVector(rhs);
            swap(copy);
        }
        return *this;
    }

    // Перемещающее присваивание
    SimpleVector& operator=(SimpleVector&& rhs) noexcept {
        if (this != &rhs) {
            items_ = std::move(rhs.items_);
            size_ = std::exchange(rhs.size_, 0);
            capacity_ = std::exchange(rhs.capacity_, 0);
        }
        return *this;
    }

    void PushBack(const Type& item) {
        if (size_ < capacity_) {
            (items_[size_]) = item;
            ++size_;
            return;
        }
        else {
            size_t new_capacity = GetSize() > 0 ? GetSize() * 2 : 1;
            Reserve(new_capacity);
            items_[size_] = item;
            capacity_ = new_capacity;
            ++size_;
            return;
        }
    }

    // Добавляет элемент в конец вектора
    // При нехватке места увеличивает вдвое вместимость вектора
    void PushBack(Type&& item) {
        if (size_ >= capacity_) {
            Reserve(capacity_ ? capacity_ * 2 : 1);
        }
        items_[size_++] = std::move(item);
    }

    // Вставляет значение value в позицию pos.
    // Возвращает итератор на вставленное значение
    // Если перед вставкой значения вектор был заполнен полностью,
    // вместимость вектора должна увеличиться вдвое, а для вектора вместимостью 0 стать равной 1
    Iterator Insert(ConstIterator pos, const Type& value) {
        size_t offset = std::distance(cbegin(), pos);
        Iterator mutable_pos = begin() + offset;
        if (GetSize() == GetCapacity()) {
            size_t new_capacity = GetSize() > 0 ? GetSize() * 2 : 1;
            Reserve(new_capacity);
            //ArrayPtr<Type> tmp_items {new_capasity};
            //std::copy(begin(), mutable_pos, tmp_items.Get());
            items_[offset] = value;
            std::copy(mutable_pos, end(), begin() + offset + 1);
           // items_.swap(tmp_items);
            ++size_;
            capacity_ = new_capacity;
            return begin() + offset;
        };

        std::copy_backward(mutable_pos, end(), end()+1);
        std::exchange(*mutable_pos,value);
        ++size_;
        return begin() + offset;

    }

    Iterator Insert(ConstIterator pos, Type&& value) {
        const size_t offset = pos - cbegin();
        if (size_ >= capacity_) {
            Reserve(capacity_ ? capacity_ * 2 : 1);
        }
        Iterator it = begin() + offset;
        std::move_backward(it, end(), end() + 1);
        *it = std::move(value);
        ++size_;
        return it;
    }



    // "Удаляет" последний элемент вектора. Вектор не должен быть пустым
    void PopBack() noexcept {
        if (size_ != 0) {
            --size_;
        }
        return;
    }

    // Удаляет элемент вектора в указанной позиции
    Iterator Erase(ConstIterator pos) {
        auto dist = std::distance(cbegin(), pos);
        Iterator mutable_pos = (begin()+ dist);
        std::move(mutable_pos+1, end(), mutable_pos);
        --size_;
        return mutable_pos;
    }

    void Reserve(size_t new_capacity) {
        if (new_capacity < capacity_) {
            return;
        }
        ArrayPtr<Type> tmp_items_(new_capacity);
        std::move(begin(),end(),tmp_items_.Get());
        items_.swap(tmp_items_);
        capacity_ = new_capacity;
    }

    // Обменивает значение с другим вектором
    void swap(SimpleVector& other) noexcept {
        auto tmp_size = other.GetSize();
        auto tmp_capacity = other.GetCapacity();

        other.size_ =  size_;
        other.capacity_ = capacity_;

        size_ = tmp_size;
        capacity_ = tmp_capacity;

        items_.swap(other.items_);
    }


    // Возвращает количество элементов в массиве
    size_t GetSize() const noexcept {
        return size_;
    }

    // Возвращает вместимость массива
    size_t GetCapacity() const noexcept {
        return capacity_;
    }

    // Сообщает, пустой ли массив
    bool IsEmpty() const noexcept {
        return size_ == 0;
    }

    // Возвращает ссылку на элемент с индексом index
    Type& operator[](size_t index) noexcept {
        return items_[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    const Type& operator[](size_t index) const noexcept {
        return items_[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    Type& At(size_t index) {
        if (index >= size_) {
            throw std::out_of_range("{Eq}");
        }
        else {
            return items_[index];
        }

    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    const Type& At(size_t index) const {
        if (index >= size_) {
            throw std::out_of_range("[eq]");
        }
        else {
            return items_[index];
        }
    }

    // Обнуляет размер массива, не изменяя его вместимость
    void Clear() noexcept {
        size_ = 0;
    }
    // Изменяет размер массива.

    // При увеличении размера новые элементы получают значение по умолчанию для типа Type
    void Resize(size_t new_size) {
        if (new_size <= size_) {
            size_ = new_size;
            return;
        }
        if (new_size <= capacity_) {
           //std::fill(end(), begin() + new_size ,Type{});
            std::generate(end(), begin() + new_size, [] () {return Type{};}); 
            size_ = new_size;
            return;
        }
        ArrayPtr<Type> tmp_items_(new_size * 2);
        std::move(begin(), begin()+ size_ , tmp_items_.Get());
        items_.swap(tmp_items_);
        size_ = new_size;
        capacity_ = new_size * 2;
    }

    // Возвращает итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator begin() noexcept {
        return items_.Get();
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator end() noexcept {
        return items_.Get()+size_;
    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator begin() const noexcept {
        return items_.Get();
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator end() const noexcept {
        return items_.Get()+size_;
    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cbegin() const noexcept {
        return items_.Get();
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cend() const noexcept {
        return items_.Get()+size_;
    }

private:
    ArrayPtr<Type> items_;
    size_t size_ = 0;
    size_t capacity_ = 0;
};



template <typename Type>
inline bool operator==(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    if (lhs.GetSize() != rhs.GetSize()) {
        return false;
    }
    return std::equal(lhs.begin(), lhs.end(), rhs.begin());

}

template <typename Type>
inline bool operator!=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return !(lhs == rhs);
}

template <typename Type>
inline bool operator<(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return std::lexicographical_compare(lhs.begin(),lhs.end(),rhs.begin(), rhs.end());
}

template <typename Type>
inline bool operator<=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return (!(lhs > rhs) || lhs == rhs);
}

template <typename Type>
inline bool operator>(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return (rhs < lhs);
}

template <typename Type>
inline bool operator>=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return (!(lhs < rhs) || lhs == rhs);
}

